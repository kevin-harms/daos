#!/usr/bin/python
'''
  (C) Copyright 2018 Intel Corporation.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
  The Government's rights to use, modify, reproduce, release, perform, display,
  or disclose this software are subject to the terms of the Apache License as
  provided in Contract No. B609815.
  Any reproduction of computer software, computer software documentation, or
  portions thereof marked with this legend must also reproduce the markings.
'''

import os
import time
import traceback
import sys
import json
import uuid

from apricot       import Test
from avocado       import main

import ServerUtils
import WriteHostFile
import daos_api
from daos_api import DaosContext, DaosPool, DaosContainer, DaosApiError

class DeleteContainerTest(Test):
    """
    Tests DAOS container delete
    and close.
    :avocado: recursive
    """
    def __init__(self, *args, **kwargs):
        super(DeleteContainerTest, self).__init__(*args, **kwargs)
        self.createmode = None
        self.createuid = None
        self.creategid = None
        self.createsetid = None
        self.createsize = None

    def setUp(self):

        # get paths from the build_vars generated by build
        with open('../../../.build_vars.json') as f:
            build_paths = json.load(f)
        self.basepath = os.path.normpath(build_paths['PREFIX']  + "/../")
        self.tmp = build_paths['PREFIX'] + '/tmp'

        self.server_group = self.params.get("server_group",'/server/',
                                           'daos_server')

        # parameters used in pool create
        self.createmode = self.params.get("mode",'/run/createtests/createmode/')
        self.createuid  = os.geteuid()
        self.creategid  = os.getegid()
        self.createsetid = self.params.get("setname",'/run/createtests/createset/')
        self.createsize  = self.params.get("size",'/run/createtests/createsize/')

        # setup the DAOS python API
        self.Context = DaosContext(build_paths['PREFIX'] + '/lib/')
        self.POOL = None
        self.CONTAINER = None

        self.hostfile = None
        self.hostlist = self.params.get("test_machines",'/run/hosts/*')
        self.hostfile = WriteHostFile.WriteHostFile(self.hostlist, self.tmp)
        ServerUtils.runServer(self.hostfile, self.server_group, self.basepath)

    def tearDown(self):
        try:
            if self.hostfile is not None:
                os.remove(self.hostfile)
        finally:
            ServerUtils.stopServer(hosts=self.hostlist)

    def test_container_delete(self):
        """
        Test basic container delete
        :avocado: tags=regression,cont,vm
        """

        expected_for_param = []
        uuidlist  = self.params.get("uuid",'/run/createtests/ContainerUUIDS/*/')
        contUUID = uuidlist[0]
        expected_for_param.append(uuidlist[1])

        pohlist = self.params.get("poh",'/run/createtests/PoolHandles/*/')
        poh = pohlist[0]
        expected_for_param.append(pohlist[1])

        openlist = self.params.get("opened", "/run/createtests/ConnectionOpened/*/")
        opened = openlist[0]
        expected_for_param.append(openlist[1])

        forcelist = self.params.get("force", "/run/createtests/ForceDestroy/*/")
        force = forcelist[0]
        expected_for_param.append(forcelist[1])

        expected_result = 'PASS'
        for result in expected_for_param:
            if result == 'FAIL':
                expected_result = 'FAIL'
                break

        # special expected result for a specific case:
        # valid pool handle + valid container UUID, container opened, force destroy > 0
        if opened and force > 0 and not contUUID == 'INVALID' and poh == 'VALID':
            expected_result = 'PASS'

        try:

            # initialize a python pool object then create the underlying
            # daos storage
            self.POOL = DaosPool(self.Context)
            self.POOL.create(self.createmode, self.createuid, self.creategid,
                             self.createsize, self.createsetid, None)

            # need a connection to create container
            self.POOL.connect(1 << 1)
            self.CONTAINER = DaosContainer(self.Context)

            # create should always work (testing destroy)
            if not contUUID == 'INVALID':
                contUUID = uuid.UUID(uuidlist[0])
                self.CONTAINER.create(self.POOL.handle, contUUID)
            else:
                self.CONTAINER.create(self.POOL.handle)

            # Opens the container if required
            if opened:
                self.CONTAINER.open(self.POOL.handle)

            # wait a few seconds and then attempds to destroy container
            time.sleep(5)
            if poh == 'VALID':
                poh = self.POOL.handle
            # if container is INVALID, overwrite with non existing UUID
            if contUUID == 'INVALID':
                contUUID = uuid.uuid4()
            self.CONTAINER.destroy(force, poh, contUUID)
            self.CONTAINER = None

            # cleanup the pool
            #self.POOL.disconnect()
            self.POOL.destroy(1)
            self.POOL = None

            if expected_result in ['FAIL']:
                    self.fail("Test was expected to fail but it passed.\n")

        except DaosApiError as e:
            print(e)
            print(traceback.format_exc())
            if expected_result == 'PASS':
                    self.fail("Test was expected to pass but it failed.\n")

if __name__ == "__main__":
    main()
